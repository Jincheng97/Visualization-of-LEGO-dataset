-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS sets;
DROP TABLE IF EXISTS themes;
DROP TABLE IF EXISTS parts;
DROP VIEW IF EXISTS top_level_themes;
DROP VIEW IF EXISTS sets_years;
DROP TABLE IF EXISTS parts_fts;


-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

CREATE TABLE sets
(
set_num text,
name text,
year int,
theme_id int,
num_parts int
);

CREATE TABLE themes
(
id int,
name text,
parent_id int
);

CREATE TABLE parts
(
part_num text,
name text,
part_cat_id int,
part_material_id int
);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]
.import data/sets.csv sets
.import data/themes.csv themes
.import data/parts.csv parts

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
SELECT count(*) FROM sqlite_master WHERE type='table' AND name='sets';
SELECT count(*) FROM sqlite_master WHERE type='table' AND name='parts';
SELECT count(*) FROM sqlite_master WHERE type='table' AND name='themes';
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX sets_index ON sets(set_num);
CREATE INDEX parts_index ON parts(part_num);
CREATE INDEX themes_index ON themes(id);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c.i) Create the top_level themes VIEW

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW top_level_themes AS
SELECT id, name
FROM themes
WHERE parent_id == '' OR parent_id IS NULL;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(top_level_themes);
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c.ii) count the top level themes in the top_level_themes view.

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(*) 'count' FROM top_level_themes;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Finding top level themes with the most sets.

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW top_level_set_theme AS
SELECT top_level_themes.name 'theme', COUNT(sets.theme_id) 'num_sets'
FROM sets
INNER JOIN top_level_themes
ON top_level_themes.id = sets.theme_id
GROUP BY top_level_themes.id;

SELECT * 
FROM top_level_set_theme 
WHERE num_sets > 25
LIMIT 10;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Calculate a percentage

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW theme_percentage AS
SELECT theme, 100.00 * num_sets / (SELECT SUM(num_sets) FROM top_level_set_theme) 'percentage'
FROM top_level_set_theme;

SELECT theme, printf('%.2f', percentage) 'percentage' FROM theme_percentage
WHERE percentage >= 5.00
ORDER BY theme_percentage.percentage DESC;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Summarize a sub-theme

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW sub_themes AS
SELECT id, name
FROM themes
WHERE EXISTS (SELECT top_level_themes.id FROM top_level_themes WHERE themes.parent_id == top_level_themes.id);

CREATE VIEW set_sub_theme AS
SELECT sub_themes.name 'sub_theme', COUNT(sets.theme_id) 'num_sets'
FROM sets
INNER JOIN sub_themes 
ON sub_themes.id = sets.theme_id
GROUP BY sub_themes.id;

SELECT * 
FROM set_sub_theme 
WHERE num_sets > 5
ORDER BY num_sets DESC, sub_theme ASC;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g.i.) Create the sets VIEW

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW sets_years AS
SELECT ROWID, year, COUNT(year) 'sets_count'
FROM sets
GROUP BY year;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(sets_years);
SELECT count(*) FROM sqlite_master WHERE type='table' AND name='sets_years';
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g.ii) Find the running total of sets in the Rebrickable database each year

-- [insert your SQL statement(s) BELOW this line]

SELECT t1.year, (SELECT sum(t2.sets_count) from sets_years AS t2 where t2.year <= t1.year) 'running_total'
FROM sets_years AS t1
WHERE t1.year <= 1989 AND t1.year >= 1980
ORDER BY t1.year ASC;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Create the FTS table and import data.

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE parts_fts USING fts4
(
part_num text,
name text,
part_cat_id int,
part_material_id int
);

.import data/parts.csv parts_fts

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(parts_fts);
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.i) Count the number of unique parts whose name field begins with the prefix ‘mini’.

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(DISTINCT part_num) 'count_overview' FROM parts_fts WHERE name MATCH '^mini*';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.ii) List the part_num’s of the unique parts that contain the terms ‘minidoll’ and ‘boy’ in the name field with no more than 5 intervening terms.

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(DISTINCT part_num) 'total_boy_minidoll' FROM parts_fts WHERE name MATCH 'boy NEAR/5 minidoll';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.iii) List the part_num’s of the unique parts that contain the terms ‘minidoll’ and ‘girl’ in the name field with no more than 5 intervening terms.

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(DISTINCT part_num) 'total_girl_minidoll' FROM parts_fts WHERE name MATCH 'girl NEAR/5 minidoll';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --